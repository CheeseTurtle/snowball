
======== Usage

Usage: snowball [-h | -V]
       snowball [-v | -q] [-v | -o] [-d] [-H]
                [-n number] [-f number]
                [-p number] [-k number]
                [-b number] [-e number | -E number]
                [-x chars] [-X number]
                [-i (delim) | -s file]
                [-c file (-C number)]
                [-r directory | -R directory]
                [l file | -L] [t file | -T]

======== Most common options

If you don't care about the details, and just want to create some snowball
poems, these are the only options you will need.

snowball
This most basic command will run the program using all default settings. It will
scan a file called "snowball-corpus.txt" in the executable directory for phrases
that snowball in length, and create 10,000 snowball poems which will be output
to a file called "output-snowballPoems-1234567890.txt". The name of the poem
file will be written to the standard output stream, and any errors will be
written to the standard error stream.

snowball -r input-directory
This will scan all files in the directory "./input-directory" for raw English
text, and will output any phrases that snowball up in letter count to a file
called "snowball-corpus.txt" in the executable directory of the program (if the
corpus file already existed, it will be overwritten). Any word that does not
appear in the file "snowball-lexicon.txt" in the executable directory will be
ignored. After the corpus file has been saved, 10,000 poems will be generated.
Note that ALL files in the directory will be read, so do be careful that the
folder only contains the text files that you want to process.

snowball -s seed-phrases.txt
Same as the usual snowballs, except that the file called "seed-phrases.txt" in
the working directory will be used as seed phrases for the poems. Each line of
"seed-phrases.txt" will be used to generate 10,000 snowball poems, and they will
be saved in the form "output-snowballPoems-1234567890-[seed-phrase].txt".

======== Program information

-h
Output a brief help message, then exit the program.

-V
Print program information (version, author, contact info) then exit the program.

======== Console output

The default is to write the name of each generated snowball file to stdout, each
on a new line, with errors going to sterr.

-q
Disable all standard stream messages; do not write anything to standard or error
output. Overrides the -v option.

-o
Write the generated snowball poems to stdout INSTEAD OF to separate files.
Overrides the -v option. Using this with the -q option will output nothing and
create no snowball files. I'm not sure why you'd want to do this though.
Checking the exit status maybe?

-v
Write verbose program information to standard output. This displays where
exactly in the code the program currently is. I use it mostly for debugging
purposes. This is overridden by the -q and -o options.

-d
Write contents of internal program vectors to separate files, for debugging. If
used with the -r or -R raw text options, this will also output a file containing
the list of all words that were not found in the lexicon file.

-H
By default, the poem output will be preceded by a header containing the program
inputs that were used to generate the poems. This option will suppress that.

======== Snowball generation

-n10000
Specify how many snowballs to attempt to create. If zero is specified, no
snowballs will be generated. This may be useful when you're only processing raw
English text into a corpus file (although I do tend to run a few snowballs, just
to test the input). The default, if no -n option is specified, is to create
10,000 snowballs.

-f100000
This only comes into play when using a snowball "seed phrase" that is in the
middle of the snowball, or if the -e option is specified. If the program cannot
create a valid poem (either by finding its way back to a one letter word using
a seed phrase, or by reaching the minimum letter count with the -e option) then
the poem will be ignored. This determines how many failed poems to ignore before
just giving up. The default, if no -f option is specified, is to ignore 100,000
dodgy snowballs.

-p70
While generating the poem, word by word, the program can examine previously
chosen words and use them in combination with the current word to select a more
likely following word. For example if the poem currently being processed started
"i am the lord", and the following word phrases were available:
    "lord spoke",  "lord lucan",  "the lord above"
The word "above" would be prioritised above "spoke" and "lucan", as "the lord"
is a longer key than simply "lord".
So this option specifies the percentage chance that the program will use a valid
longer key over a shorter one. In the example above, the program would use
"above" 70% of the time, and the remaining 30% of the time it would travel one
lower and choose "spoke" or "lucan".
The default is "70", which seems to work pretty well.

-k1
Specify a minimum word key size to use. The default is 1. Using the example
above, if a key size of 2 was used, only the phrase "the lord above" would be
considered, as "lord spoke" and "lord lucan" use only one word as their key.
Larger keys work much better with a large corpus though, and keys greater than
2 rarely produce anything at all, but it accepts values up to 10.
If a value of 0 is specified, the program will not use Markov chains at all.
It will randomly select a 1 letter word, then a 2 letter word, then a 3 letter
word, until it reaches the "ending word length", specified using the -e option.
This usually produces drivel though, so use it wisely.

-b4
"Beginning word length" - Begin poems at a word length other than 1. If used
with a seed phrase, the poem will still begin with that seed phrase. So if the
seed phrase was "last words" and the begin length was 9, the poems would still
begin at "last", even though it only has 4 letters.

-e8
"Ending word length" - Reject poems whose last words are not at least 'n'
letters long. This does nothing special during the creation of the poems, it
only comes into play after the poem has been generated. It checks that the poem
is long enough, and if it isn't the poem is discarded. You can uses the failure
count -f option to specify how many failed poems to allow before throwing an
error.

-E8
"Exact ending word length" - Output poems whose last words are exactly 'n'
letters long. This is the same as the -e option, but once the poem is determined
to be long enough, it is truncated to exactly the length specified.

-x aeiuy
Exclude certain letters from generated poems. This lets you create lipogrammatic
snowballs. For example, using the argument "aeiuy" a resulting poem might be:
"o no god took forth worlds comfort", where "O" is the only vowel used.

-X3
Minimum word length to apply the filter specified in 'x'. The filter will only
apply to words that are at least this long. Words that have fewer letters will
not be filtered. The default is to apply the filter to all words.

======== Snowball seed phrases

-s filename.txt
Take seed phrases as input from a file, each separated by a new line. For each
seed phrase, create a file full of snowballs based on that seed.

-i [ delim ]
Take seed phrases as input from standard input. For each seed phrase, create a
file full of snowballs based on that seed. Each phrase is separated by the char
specified in the "delim" argument. This argument is optional; if a delimiter is
not specified then a new line is used. If a delimiter longer than one character
is specified, it will only use the first character in the string.
Example 1:  echo "sordid chatter" | snowball -i
Example 2:  echo "i am the,the only,glittered menacingly" | snowball -i,
Example 3:  snowball -i, < seed-phrases.csv

======== Snowball corpus files

-c snowball-corpus.txt
Specify the corpus input file. The file contains a list of phrases that snowball
upwards by one in letter count, with one phrase per line. This is used as input
when generating snowballs, and is generated by the program as output when the -r
or -R option is specified. The default, if no -c option is specified, is to use
a file called "snowball-corpus.txt" in the program executable directory.
  More than one corpus file can be specified. To do this, just use multiple -c
options: "-c a.txt -c b.txt". If this is used with the -r or -R option, then
multiple identical corpus files will be generated. If used as input, then both
files will be read from.

-C5
Optional. Specify the weight of the corresponding corpus input file. For example
if corpus "a.txt" had a weight of 3, and corpus "b.txt" had a weight of 2, the
words in "a.txt" would be prioritised 1.5 times more than the words in "b.txt".
  Example:  "-c a.txt -c b.txt -C3 -C2"  or  "-c a.txt -C3 -c b.txt -C2"
By default, all corpora will have a weight of 1.

======== Processing raw input

-r ./input_directory
Create from raw English text files. This will create a processed file from the
raw text files in the specified directory. This process converts each raw file
to a processed file named "pro-00000.txt", and saves each into the working
directory. When all files are processed, it then groups them together into one
big file, removes duplicate lines, and deletes the temporary smaller files. So
don't go deleting the temporary files while this is running, or you'll bugger it
all up.

-R ./root_directory
Same as -r, but searches recursively through not just the root directory, but
all subdirectories that it encounters.

-l snowball-lexicon.txt
Specify the lexicon file to use to validate words in the raw text files. The
program will ignore any word that is not found in the lexicon. If this option is
not specified, the default is to use the file "snowball-lexicon.txt" in the
program executable directory. (Throws an error if -l and -L are both specified)

-L
Don't use a lexicon file to validate words. If this is specified, ALL words will
be considered valid. (Throws an error if -l and -L are both specified)

-t snowball-thesaurus.txt
Specify the thesaurus file to use to switch words in the raw text files. The
program will switch any word that is in the file with all other words on the
same line. If this option is not specified, the default is to use the file
"snowball-thesaurus.txt" in the program executable directory. (Throws an error
if -t and -T are both specified)

-T
Don't use a thesaurus file to switch words. (Throws an error if -t and -T are
both specified)